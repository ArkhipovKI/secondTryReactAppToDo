{"version":3,"sources":["components/new-task-form.js","components/task.js","components/new-task-list.js","components/tasks-filter.js","components/footer.js","index.js"],"names":["NewTaskForm","state","label","onLabelChange","event","setState","target","value","onSubmit","preventDefault","props","AddItem","className","this","onChange","placeholder","autoFocus","required","Component","Task","newText","oldValue","handleInputChange","handleKeyDown","successEdit","id","onDeleted","key","trim","isEditing","completed","toggleStateOfTask","onEdited","currentStatus","created","type","onClick","formatDistanceToNow","includeSeconds","onKeyDown","ref","input","focus","defaultProps","Math","random","Date","NewTaskList","todos","el","map","item","TasksFilter","deleteCompleted","handleToggleFilter","name","Footer","completedCount","ToDoApp","maxId","toDoData","createItem","toggleProperty","addNewItem","text","newItem","deleteItem","filter","newArr","console","log","arr","propName","index","findIndex","oldEl","newEl","slice","now","length","ReactDOM","render","document","getElementById"],"mappings":"uQAGqBA,E,4MACpBC,MAAQ,CACPC,MAAO,I,EAGRC,cAAgB,SAACC,GAChB,EAAKC,SAAS,CACbH,MAAOE,EAAME,OAAOC,S,EAItBC,SAAW,SAACJ,GACXA,EAAMK,iBACN,EAAKC,MAAMC,QAAQ,EAAKV,MAAMC,OAC9B,EAAKG,SAAS,CACbH,MAAO,M,4CAIT,WAEC,OACC,uBAAMU,UAAU,aACfJ,SAAUK,KAAKL,SADhB,UAEC,uBACCI,UAAU,WACVE,SAAUD,KAAKV,cACfY,YAAY,yBACZC,WAAS,EACTT,MAAOM,KAAKZ,MAAMC,MAClBe,UAAQ,IAET,wBAAQL,UAAU,4BAAlB,6B,GAhCqCM,a,QCEpBC,E,4MA0BpBlB,MAAQ,CACPmB,QAAS,EAAKV,MAAMR,MACpBmB,SAAU,EAAKX,MAAMR,O,EAGtBoB,kBAAoB,SAAClB,GACpB,IAAQG,EAAUH,EAAME,OAAhBC,MACR,EAAKF,SAAS,CACbe,QAASb,K,EAIXgB,cAAgB,SAACnB,GAChB,MAA8B,EAAKH,MAA3BmB,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,SACjB,EAAuC,EAAKX,MAApCc,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,GAAIC,EAAzB,EAAyBA,UACP,UAAdtB,EAAMuB,KAAmBvB,EAAMuB,IAAIC,SACtB,KAAZR,GACHM,EAAUD,GAEXD,EAAYJ,EAASK,GACrB,EAAKpB,SAAS,CACbgB,SAAUD,KAGM,WAAdhB,EAAMuB,MACTH,EAAYH,EAAUI,GACtB,EAAKpB,SAAS,CACbe,QAASC,M,4CAKZ,WAEC,IAAMD,EAAYP,KAAKZ,MAAjBmB,QACN,EAAwGP,KAAKH,MAArGR,EAAR,EAAQA,MAAOwB,EAAf,EAAeA,UAAWG,EAA1B,EAA0BA,UAAWC,EAArC,EAAqCA,UAAWC,EAAhD,EAAgDA,kBAAmBC,EAAnE,EAAmEA,SAAUC,EAA7E,EAA6EA,cAAeC,EAA5F,EAA4FA,QAExFtB,EAAakB,EAAiB,YAAL,GAC7BlB,GAAS,UAAyB,WAAlBqB,GAA8BH,EAAY,UAAY,IACtElB,GAAS,UAAyB,cAAlBqB,GAAkCH,EAAwB,GAAZ,WAC9DlB,GAAS,UAAOiB,EAAY,WAAa,IAIzC,OACC,qBAAIjB,UAAWA,EAAf,UACC,sBAAKA,UAJI,OAIT,UACC,uBAAOA,UAAU,SAASuB,KAAK,WAAWC,QAASL,IACnD,kCACC,sBAAMnB,UAAU,cAAhB,SAA+BV,IAC/B,uBAAMU,UAAU,UAAhB,qBAAmCyB,YAAoBH,EAAS,CAAEI,gBAAgB,IAAlF,aAED,wBAAQ1B,UAAU,iBAAiBwB,QAASJ,IAC5C,wBAAQpB,UAAU,oBAAoBwB,QAASV,OAGhD,uBACCS,KAAK,OACLvB,UAAU,OACVL,MAAOa,EACPmB,UAAW1B,KAAKU,cAChBT,SAAUD,KAAKS,kBACfkB,IAAK,SAAAC,GAAK,OAAIA,GAASA,EAAMC,kB,GAxFAxB,aAAbC,EACbwB,aAAe,CACrBzC,MAAO,0GACP4B,WAAW,EACXL,GAAoB,IAAhBmB,KAAKC,SACTX,QAAS,IAAIY,KACbb,cAAe,MACfJ,WAAW,EACXf,SAAU,aACVY,UAAW,aACXM,SAAU,aACVD,kBAAmB,cCZrB,IAAMgB,EAAc,SAAC,GAAmF,IAAjFC,EAAgF,EAAhFA,MAAOf,EAAyE,EAAzEA,cAAeT,EAA0D,EAA1DA,YAAaE,EAA6C,EAA7CA,UAAWK,EAAkC,EAAlCA,kBAAmBC,EAAe,EAAfA,SACjFiB,EAAKD,EAAME,KAAI,SAACC,GAAD,OACpB,cAAC,EAAD,2BAEKA,GAFL,IAGCnB,SAAU,kBAAMA,EAASmB,EAAK1B,KAC9BC,UAAW,kBAAMA,EAAUyB,EAAK1B,KAChCQ,cAAeA,EACfT,YAAaA,EACbO,kBAAmB,kBAAMA,EAAkBoB,EAAK1B,OAN3C0B,EAAK1B,OAQZ,OACC,oBAAIb,UAAU,YAAd,SACEqC,KAKJF,EAAYJ,aAAe,CAC1BK,MAAO,GACPG,KAAM,GACNlB,cAAe,MACfF,kBAAmB,aACnBP,YAAa,aACbE,UAAW,aACXM,SAAU,cAkBIe,QC5CMK,E,4JAcpB,WACC,MAA+DvC,KAAKH,MAA5D2C,EAAR,EAAQA,gBAAiBpB,EAAzB,EAAyBA,cAAeqB,EAAxC,EAAwCA,mBAExC,OACC,qBAAI1C,UAAU,UAAd,UACC,6BACC,wBACC2C,KAAK,MACL3C,UAA6B,QAAlBqB,EAA0B,WAAa,GAClDG,QAAS,SAAChC,GAAD,OAAWkD,EAAmBlD,EAAME,OAAOiD,OAHrD,mBAOD,6BACC,wBACCA,KAAK,SACL3C,UAA6B,WAAlBqB,EAA6B,WAAa,GACrDG,QAAS,SAAChC,GAAD,OAAWkD,EAAmBlD,EAAME,OAAOiD,OAHrD,sBAOD,6BACC,wBACCA,KAAK,YACL3C,UAA6B,cAAlBqB,EAAgC,WAAa,GACxDG,QAAS,SAAChC,GAAD,OAAWkD,EAAmBlD,EAAME,OAAOiD,OAHrD,yBAOD,6BACC,wBACCnB,QAASiB,EADV,sC,GA5CoCnC,aAApBkC,EAEbT,aAAe,CACrBV,cAAe,MACfoB,gBAAiB,aACjBC,mBAAoB,c,ICJDE,E,4JAgBpB,WACC,MAAsF3C,KAAKH,MAAnF+C,EAAR,EAAQA,eAAgBJ,EAAxB,EAAwBA,gBAAiBL,EAAzC,EAAyCA,MAAOM,EAAhD,EAAgDA,mBAAoBrB,EAApE,EAAoEA,cAEpE,OACC,yBAAQrB,UAAU,SAAlB,UACC,uBAAMA,UAAU,aAAhB,UAA8B6C,EAA9B,iBACA,cAAC,EAAD,2BACKT,GADL,IAECM,mBAAoBA,EACpBrB,cAAeA,EACfoB,gBAAiBA,Y,GA1BcnC,aAAfsC,EACbb,aAAe,CACrBc,eAAgB,EAChBJ,gBAAiB,aACjBL,MAAO,GACPM,mBAAoB,aACpBrB,cAAe,O,ICFIyB,E,4MAEpBC,MAAQ,E,EAER1D,MAAQ,CACP2D,SAAU,CACT,EAAKC,WAAW,kBAChB,EAAKA,WAAW,gBAChB,EAAKA,WAAW,gBAEjB5B,cAAe,O,EA0BhBD,SAAW,SAACP,GACX,EAAKpB,UAAS,YAAmB,IAAhBuD,EAAe,EAAfA,SAChB,MAAO,CAAEA,SAAU,EAAKE,eAAeF,EAAUnC,EAAI,kB,EAIvDsC,WAAa,SAACC,GACb,EAAK3D,UAAS,YAAmB,IAAhBuD,EAAe,EAAfA,SAEVK,EAAU,EAAKJ,WAAWG,GAGhC,MAAO,CACNJ,SAHW,sBAAOA,GAAP,CAAiBK,S,EAS/BlC,kBAAoB,SAACN,GACpB,EAAKpB,UAAS,YAAmB,IAAhBuD,EAAe,EAAfA,SAChB,MAAO,CACNA,SAAU,EAAKE,eAAeF,EAAUnC,EAAI,kB,EAK/CyC,WAAa,SAACzC,GACb,EAAKpB,UAAS,YAGb,MAAO,CACNuD,SAJ8B,EAAfA,SACQO,QAAO,SAAClB,GAAD,OAAQA,EAAGxB,KAAOA,U,EAQnD4B,gBAAkB,WACjB,EAAKhD,UAAS,YAAmB,IAC1B+D,EADyB,EAAfR,SACQO,QAAO,SAAClB,GAAD,OAAyB,IAAjBA,EAAGnB,aAE1C,OADAuC,QAAQC,IAAIF,GACL,CACNR,SAAUQ,O,EAKbd,mBAAqB,SAACC,GACrB,EAAKlD,SAAS,CACb4B,cAAesB,K,EAGjB/B,YAAc,SAACwC,EAAMvC,GACpB,EAAKpB,UAAS,YASb,MAAO,CACNuD,SAV8B,EAAfA,SACUV,KAAI,SAACD,GAK9B,OAJIxB,IAAOwB,EAAGxB,KACbwB,EAAG/C,MAAQ8D,EACXf,EAAGpB,WAAaoB,EAAGpB,WAEboB,U,oDAlFV,SAAesB,EAAK9C,EAAI+C,GACvB,IAAMC,EAAQF,EAAIG,WAAU,SAACzB,GAAD,OAAQA,EAAGxB,KAAOA,KAExCkD,EAAQJ,EAAIE,GACZG,EAAK,2BAAQD,GAAR,kBAAgBH,GAAYG,EAAMH,KAE7C,MAAM,GAAN,mBACID,EAAIM,MAAM,EAAGJ,IADjB,CAECG,GAFD,YAGIL,EAAIM,MAAMJ,EAAQ,O,wBAIvB,SAAWvE,GACV,MAAQ,CACPA,QACA4B,WAAW,EACXL,GAAIZ,KAAK8C,QACT9B,WAAW,EACXK,QAASY,KAAKgC,S,oBAuEhB,WACCT,QAAQC,IAAIzD,KAAKZ,OACjB,MAAoCY,KAAKZ,MAAjCgC,EAAR,EAAQA,cAAe2B,EAAvB,EAAuBA,SAEjBH,EAAiBG,EAASO,QAAO,SAAClB,GAAD,OAAyB,IAAjBA,EAAGnB,aAAqBiD,OAEvE,OACC,0BAASnE,UAAU,UAAnB,UACC,mCACC,uCACA,cAAC,EAAD,CAAaD,QAASE,KAAKkD,gBAE5B,0BAASnD,UAAU,OAAnB,UACC,cAAC,EAAD,CACCoC,MAAOY,EACP3B,cAAeA,EACfD,SAAUnB,KAAKmB,SACfN,UAAWb,KAAKqD,WAChBnC,kBAAmBlB,KAAKkB,kBACxBP,YAAaX,KAAKW,cACnB,cAAC,EAAD,CACCiC,eAAgBA,EAChBxB,cAAeA,EACfe,MAAOY,EACPP,gBAAiBxC,KAAKwC,gBACtBC,mBAAoBzC,KAAKyC,+B,GAhIMpC,aAuIrC8D,IAASC,OAAO,cAAC,EAAD,IAAaC,SAASC,eAAe,W","file":"static/js/main.ef2b32dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nexport default class NewTaskForm extends Component {\n\tstate = {\n\t\tlabel: ''\n\t}\n\n\tonLabelChange = (event) => {\n\t\tthis.setState({\n\t\t\tlabel: event.target.value\n\t\t})\n\t}\n\n\tonSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\tthis.props.AddItem(this.state.label)\n\t\tthis.setState({\n\t\t\tlabel: ''\n\t\t})\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<form className='form-input'\n\t\t\t\tonSubmit={this.onSubmit}>\n\t\t\t\t<input\n\t\t\t\t\tclassName='new-todo'\n\t\t\t\t\tonChange={this.onLabelChange}\n\t\t\t\t\tplaceholder='What needs to be done?'\n\t\t\t\t\tautoFocus\n\t\t\t\t\tvalue={this.state.label}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<button className='btn btn-outline-secondary'>\n\t\t\t\t\tAdd Item\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t)\n\t}\n}\n","import React, { Component } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport PropTypes from 'prop-types';\n\n\nexport default class Task extends Component {\n\tstatic defaultProps = {\n\t\tlabel: 'Неизвестная задача',\n\t\tcompleted: false,\n\t\tid: Math.random() * 10000,\n\t\tcreated: new Date(),\n\t\tcurrentStatus: 'all',\n\t\tisEditing: false,\n\t\tonChange: () => { },\n\t\tonDeleted: () => { },\n\t\tonEdited: () => { },\n\t\ttoggleStateOfTask: () => { },\n\t}\n\n\tstatic propTypes = {\n\t\tlabel: PropTypes.string,\n\t\tcompleted: PropTypes.bool,\n\t\tid: PropTypes.number,\n\t\tcreated: PropTypes.number,\n\t\tisEditing: PropTypes.bool,\n\t\tonDeleted: PropTypes.func,\n\t\tonEdited: PropTypes.func,\n\t\ttoggleStateOfTask: PropTypes.func,\n\t\tonChange: PropTypes.func,\n\t\tcurrentStatus: PropTypes.string\n\t}\n\tstate = {\n\t\tnewText: this.props.label,\n\t\toldValue: this.props.label\n\t}\n\n\thandleInputChange = (event) => {\n\t\tconst { value } = event.target\n\t\tthis.setState({\n\t\t\tnewText: value\n\t\t});\n\t};\n\n\thandleKeyDown = (event) => {\n\t\tconst { newText, oldValue } = this.state;\n\t\tconst { successEdit, id, onDeleted } = this.props;\n\t\tif (event.key === 'Enter' && event.key.trim()) {\n\t\t\tif (newText === '') {\n\t\t\t\tonDeleted(id)\n\t\t\t}\n\t\t\tsuccessEdit(newText, id)\n\t\t\tthis.setState({\n\t\t\t\toldValue: newText\n\t\t\t})\n\t\t}\n\t\tif (event.key === 'Escape') {\n\t\t\tsuccessEdit(oldValue, id)\n\t\t\tthis.setState({\n\t\t\t\tnewText: oldValue\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\n\t\tlet { newText } = this.state;\n\t\tconst { label, onDeleted, isEditing, completed, toggleStateOfTask, onEdited, currentStatus, created } = this.props;\n\n\t\tlet className = !completed ? '' : 'completed';\n\t\tclassName += `${currentStatus === 'active' && completed ? ' hidden' : ''}`\n\t\tclassName += `${currentStatus === 'completed' && !completed ? ' hidden' : ''}`\n\t\tclassName += `${isEditing ? ' editing' : ''}`\n\n\t\tlet view = 'view';\n\n\t\treturn (\n\t\t\t<li className={className}>\n\t\t\t\t<div className={view}>\n\t\t\t\t\t<input className=\"toggle\" type=\"checkbox\" onClick={toggleStateOfTask} />\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span className='description'>{label}</span>\n\t\t\t\t\t\t<span className=\"created\">created {formatDistanceToNow(created, { includeSeconds: true })} ago</span>\n\t\t\t\t\t</label>\n\t\t\t\t\t<button className=\"icon icon-edit\" onClick={onEdited}></button>\n\t\t\t\t\t<button className=\"icon icon-destroy\" onClick={onDeleted}></button>\n\t\t\t\t</div>\n\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"edit\"\n\t\t\t\t\tvalue={newText}\n\t\t\t\t\tonKeyDown={this.handleKeyDown}\n\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\tref={input => input && input.focus()}\n\t\t\t\t/>\n\t\t\t</li>\n\t\t)\n\t}\n}\n\n","import React from 'react';\nimport Task from './task';\nimport PropTypes from 'prop-types';\n\nconst NewTaskList = ({ todos, currentStatus, successEdit, onDeleted, toggleStateOfTask, onEdited }) => {\n\tconst el = todos.map((item) => (\n\t\t<Task\n\t\t\tkey={item.id}\n\t\t\t{...item}\n\t\t\tonEdited={() => onEdited(item.id)}\n\t\t\tonDeleted={() => onDeleted(item.id)}\n\t\t\tcurrentStatus={currentStatus}\n\t\t\tsuccessEdit={successEdit}\n\t\t\ttoggleStateOfTask={() => toggleStateOfTask(item.id)} />\n\t))\n\treturn (\n\t\t<ul className='todo-list'>\n\t\t\t{el}\n\t\t</ul>\n\t)\n}\n\nNewTaskList.defaultProps = {\n\ttodos: [],\n\titem: {},\n\tcurrentStatus: 'all',\n\ttoggleStateOfTask: () => { },\n\tsuccessEdit: () => { },\n\tonDeleted: () => { },\n\tonEdited: () => { }\n}\n\nNewTaskList.propTypes = {\n\titem: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\tcompleted: PropTypes.bool,\n\t\tid: PropTypes.number,\n\t\tisEditing: PropTypes.bool,\n\t}),\n\ttodos: PropTypes.arrayOf(PropTypes.object),\n\tcurrentStatus: PropTypes.string,\n\tonDeleted: PropTypes.func,\n\tonEdited: PropTypes.func,\n\ttoggleStateOfTask: PropTypes.func,\n\tsuccessEdit: PropTypes.func\n}\n\nexport default NewTaskList;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class TasksFilter extends Component {\n\n\tstatic defaultProps = {\n\t\tcurrentStatus: 'all',\n\t\tdeleteCompleted: () => { },\n\t\thandleToggleFilter: () => { }\n\t}\n\n\tstatic propTypes = {\n\t\tcurrentStatus: PropTypes.string,\n\t\tdeleteCompleted: PropTypes.func,\n\t\thandleToggleFilter: PropTypes.func\n\t}\n\n\trender() {\n\t\tconst { deleteCompleted, currentStatus, handleToggleFilter } = this.props\n\n\t\treturn (\n\t\t\t<ul className=\"filters\">\n\t\t\t\t<li>\n\t\t\t\t\t<button\n\t\t\t\t\t\tname='all'\n\t\t\t\t\t\tclassName={currentStatus === 'all' ? 'selected' : ''}\n\t\t\t\t\t\tonClick={(event) => handleToggleFilter(event.target.name)} >\n\t\t\t\t\t\tAll\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<button\n\t\t\t\t\t\tname='active'\n\t\t\t\t\t\tclassName={currentStatus === 'active' ? 'selected' : ''}\n\t\t\t\t\t\tonClick={(event) => handleToggleFilter(event.target.name)} >\n\t\t\t\t\t\tActive\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<button\n\t\t\t\t\t\tname='completed'\n\t\t\t\t\t\tclassName={currentStatus === 'completed' ? 'selected' : ''}\n\t\t\t\t\t\tonClick={(event) => handleToggleFilter(event.target.name)} >\n\t\t\t\t\t\tCompleted\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={deleteCompleted} >\n\t\t\t\t\t\tClear completed\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t)\n\t}\n}\n\n","import React, { Component } from 'react';\nimport TasksFilter from './tasks-filter'\nimport PropTypes from 'prop-types';\n\nexport default class Footer extends Component {\n\tstatic defaultProps = {\n\t\tcompletedCount: 0,\n\t\tdeleteCompleted: () => { },\n\t\ttodos: [],\n\t\thandleToggleFilter: () => { },\n\t\tcurrentStatus: 'all'\n\t}\n\n\tstatic propTypes = {\n\t\tdeleteCompleted: PropTypes.func,\n\t\ttodos: PropTypes.arrayOf(PropTypes.object),\n\t\thandleToggleFilter: PropTypes.func,\n\t\tcurrentStatus: PropTypes.string\n\t}\n\n\trender() {\n\t\tconst { completedCount, deleteCompleted, todos, handleToggleFilter, currentStatus } = this.props\n\n\t\treturn (\n\t\t\t<footer className='footer'>\n\t\t\t\t<span className=\"todo-count\">{completedCount} items left</span>\n\t\t\t\t<TasksFilter\n\t\t\t\t\t{...todos}\n\t\t\t\t\thandleToggleFilter={handleToggleFilter}\n\t\t\t\t\tcurrentStatus={currentStatus}\n\t\t\t\t\tdeleteCompleted={deleteCompleted}\n\t\t\t\t/>\n\t\t\t</footer>\n\t\t)\n\t}\n}\n\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NewTaskForm from './components/new-task-form';\nimport NewTaskList from './components/new-task-list';\nimport Footer from './components/footer';\n\n\nexport default class ToDoApp extends Component {\n\n\tmaxId = 1;\n\n\tstate = {\n\t\ttoDoData: [\n\t\t\tthis.createItem('Completed task'),\n\t\t\tthis.createItem('Editing task'),\n\t\t\tthis.createItem('Active task')\n\t\t],\n\t\tcurrentStatus: 'all'\n\t};\n\n\ttoggleProperty(arr, id, propName) {\n\t\tconst index = arr.findIndex((el) => el.id === id);\n\n\t\tconst oldEl = arr[index];\n\t\tconst newEl = { ...oldEl, [propName]: !oldEl[propName] }\n\n\t\treturn [\n\t\t\t...arr.slice(0, index),\n\t\t\tnewEl,\n\t\t\t...arr.slice(index + 1)\n\t\t]\n\t}\n\n\tcreateItem(label) {\n\t\treturn ({\n\t\t\tlabel,\n\t\t\tcompleted: false,\n\t\t\tid: this.maxId++,\n\t\t\tisEditing: false,\n\t\t\tcreated: Date.now()\n\t\t})\n\t}\n\n\tonEdited = (id) => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\treturn { toDoData: this.toggleProperty(toDoData, id, 'isEditing') }\n\t\t})\n\t}\n\n\taddNewItem = (text) => {\n\t\tthis.setState(({ toDoData }) => {\n\n\t\t\tconst newItem = this.createItem(text)\n\t\t\tconst newArr = [...toDoData, newItem]\n\n\t\t\treturn {\n\t\t\t\ttoDoData: newArr\n\t\t\t}\n\n\t\t})\n\t}\n\n\ttoggleStateOfTask = (id) => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\treturn {\n\t\t\t\ttoDoData: this.toggleProperty(toDoData, id, 'completed')\n\t\t\t};\n\t\t})\n\t}\n\n\tdeleteItem = (id) => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\tconst newArr = toDoData.filter((el) => el.id !== id)\n\n\t\t\treturn {\n\t\t\t\ttoDoData: newArr\n\t\t\t}\n\t\t})\n\t}\n\n\tdeleteCompleted = () => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\tconst newArr = toDoData.filter((el) => el.completed !== true)\n\t\t\tconsole.log(newArr)\n\t\t\treturn {\n\t\t\t\ttoDoData: newArr\n\t\t\t}\n\t\t})\n\t}\n\n\thandleToggleFilter = (name) => {\n\t\tthis.setState({\n\t\t\tcurrentStatus: name,\n\t\t})\n\t}\n\tsuccessEdit = (text, id) => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\tconst newState = toDoData.map((el) => {\n\t\t\t\tif (id === el.id) {\n\t\t\t\t\tel.label = text;\n\t\t\t\t\tel.isEditing = !el.isEditing;\n\t\t\t\t}\n\t\t\t\treturn el;\n\t\t\t})\n\n\t\t\treturn {\n\t\t\t\ttoDoData: newState\n\t\t\t}\n\t\t})\n\t}\n\trender() {\n\t\tconsole.log(this.state)\n\t\tconst { currentStatus, toDoData } = this.state\n\n\t\tconst completedCount = toDoData.filter((el) => el.completed === false).length\n\n\t\treturn (\n\t\t\t<section className='todoapp' >\n\t\t\t\t<header>\n\t\t\t\t\t<h1>todos</h1>\n\t\t\t\t\t<NewTaskForm AddItem={this.addNewItem} />\n\t\t\t\t</header>\n\t\t\t\t<section className='main'>\n\t\t\t\t\t<NewTaskList\n\t\t\t\t\t\ttodos={toDoData}\n\t\t\t\t\t\tcurrentStatus={currentStatus}\n\t\t\t\t\t\tonEdited={this.onEdited}\n\t\t\t\t\t\tonDeleted={this.deleteItem}\n\t\t\t\t\t\ttoggleStateOfTask={this.toggleStateOfTask}\n\t\t\t\t\t\tsuccessEdit={this.successEdit} />\n\t\t\t\t\t<Footer\n\t\t\t\t\t\tcompletedCount={completedCount}\n\t\t\t\t\t\tcurrentStatus={currentStatus}\n\t\t\t\t\t\ttodos={toDoData}\n\t\t\t\t\t\tdeleteCompleted={this.deleteCompleted}\n\t\t\t\t\t\thandleToggleFilter={this.handleToggleFilter}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\t\t\t</section>\n\t\t);\n\t}\n}\nReactDOM.render(<ToDoApp />, document.getElementById('root'))\n"],"sourceRoot":""}