{"version":3,"sources":["components/new-task-form.js","components/task.js","components/new-task-list.js","components/tasks-filter.js","components/footer.js","index.js"],"names":["NewTaskForm","state","label","onLabelChange","event","value","target","setState","onSubmit","preventDefault","props","AddItem","className","this","onChange","placeholder","autoFocus","required","Component","Task","newText","oldValue","handleInputChange","handleOnBlur","console","log","successEdit","id","handleKeyDown","onDeleted","key","trim","focus","isEditing","completed","toggleStateOfTask","onEdited","currentStatus","created","cn","type","readOnly","checked","onClick","formatDistanceToNow","includeSeconds","onKeyUp","ref","input","onBlur","defaultProps","Math","random","Date","NewTaskList","todos","el","map","item","TasksFilter","deleteCompleted","handleToggleFilter","name","Footer","completedCount","ToDoApp","toDoData","createItem","toggleProperty","addNewItem","text","newItem","deleteItem","filter","newArr","localStorage","setItem","JSON","stringify","dataState","parse","getItem","dataStatus","arr","propName","index","findIndex","oldEl","newEl","slice","now","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7c9dd822.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './new-task-form.css'\n\nexport default class NewTaskForm extends Component {\n\tstate = {\n\t\tlabel: ''\n\t}\n\n\tonLabelChange = (event) => {\n\t\tconst value = event.target.value\n\n\t\tif (value !== ' ') {\n\t\t\tthis.setState({ label: value })\n\n\t\t}\n\t}\n\n\tonSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\tthis.props.AddItem(this.state.label)\n\t\tthis.setState({\n\t\t\tlabel: ''\n\t\t})\n\t}\n\n\trender() {\n\n\t\treturn (\n\t\t\t<form className='form-input'\n\t\t\t\tonSubmit={this.onSubmit}>\n\t\t\t\t<input\n\t\t\t\t\tclassName='new-todo'\n\t\t\t\t\tonChange={this.onLabelChange}\n\t\t\t\t\tplaceholder='What needs to be done?'\n\t\t\t\t\tautoFocus\n\t\t\t\t\tvalue={this.state.label}\n\t\t\t\t\trequired\n\t\t\t\t/>\n\t\t\t\t<button className='btn btn-outline-secondary'>\n\t\t\t\t\tAdd Item\n\t\t\t\t</button>\n\t\t\t</form>\n\t\t)\n\t}\n}\n","import React, { Component } from 'react';\nimport { formatDistanceToNow } from 'date-fns';\nimport PropTypes from 'prop-types';\nimport './task.css'\nimport cn from 'classnames'\n\nexport default class Task extends Component {\n\tstatic defaultProps = {\n\t\tlabel: 'Неизвестная задача',\n\t\tcompleted: false,\n\t\tid: Math.random() * 10000,\n\t\tcreated: new Date(),\n\t\tcurrentStatus: 'all',\n\t\tisEditing: false,\n\t\tonChange: () => { },\n\t\tonDeleted: () => { },\n\t\tonEdited: () => { },\n\t\ttoggleStateOfTask: () => { },\n\t\tsuccessEdit: () => { },\n\t}\n\n\tstatic propTypes = {\n\t\tlabel: PropTypes.string,\n\t\tcompleted: PropTypes.bool,\n\t\tid: PropTypes.number,\n\t\tcreated: PropTypes.number,\n\t\tisEditing: PropTypes.bool,\n\t\tonDeleted: PropTypes.func,\n\t\tonEdited: PropTypes.func,\n\t\ttoggleStateOfTask: PropTypes.func,\n\t\tonChange: PropTypes.func,\n\t\tcurrentStatus: PropTypes.string\n\t}\n\n\tstate = {\n\t\tnewText: this.props.label,\n\t\toldValue: this.props.label\n\t}\n\n\thandleInputChange = (event) => {\n\t\tconst { value } = event.target\n\t\tthis.setState({\n\t\t\tnewText: value\n\t\t});\n\t};\n\n\thandleOnBlur = (event) => {\n\t\tconsole.log(event)\n\t\tconst { successEdit, id } = this.props\n\t\tsuccessEdit(this.state.newText !== '' ? this.state.newText : 'Введите задачу', id)\n\t}\n\n\thandleKeyDown = (event) => {\n\t\tconst { newText, oldValue } = this.state;\n\t\tconst { successEdit, id, onDeleted } = this.props;\n\t\tif (event.key === 'Enter' && event.key.trim()) {\n\t\t\tif (newText === '') {\n\t\t\t\tonDeleted(id)\n\t\t\t}\n\t\t\tevent.preventDefault()\n\t\t\tsuccessEdit(newText, id)\n\t\t\tthis.setState({\n\t\t\t\toldValue: newText\n\t\t\t})\n\t\t\tevent.target.focus()\n\t\t}\n\t\tif (event.key === 'Escape') {\n\t\t\tsuccessEdit(oldValue, id)\n\t\t\tthis.setState({\n\t\t\t\tnewText: oldValue\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\t\tlet { newText } = this.state;\n\t\tconst { label, onDeleted, isEditing, completed, toggleStateOfTask, onEdited, currentStatus, created } = this.props;\n\n\t\t//let className = !completed ? '' : 'completed';\n\t\tlet className = cn({\n\t\t\t'editing': isEditing,\n\t\t\t'completed': completed,\n\t\t\t'hidden': (completed && currentStatus === 'active') ||\n\t\t\t\t(currentStatus === 'completed' && !completed)\n\t\t})\n\t\t//className += `${currentStatus === 'active' && completed ? ' hidden' : ''}`\n\t\t//className += `${currentStatus === 'completed' && !completed ? ' hidden' : ''}`\n\t\t//className += `${isEditing ? ' editing' : ''}`\n\n\t\tlet view = 'view';\n\n\t\treturn (\n\t\t\t<li className={className}>\n\t\t\t\t<div className={view}>\n\t\t\t\t\t<input className=\"toggle\" type=\"checkbox\" readOnly checked={completed} onClick={toggleStateOfTask} />\n\t\t\t\t\t<label>\n\t\t\t\t\t\t<span className='description'>{label}</span>\n\t\t\t\t\t\t<span className=\"created\">created {formatDistanceToNow(created, { includeSeconds: true })} ago</span>\n\t\t\t\t\t</label>\n\t\t\t\t\t<button className=\"icon icon-edit\" onClick={onEdited}></button>\n\t\t\t\t\t<button className=\"icon icon-destroy\" onClick={onDeleted}></button>\n\t\t\t\t</div>\n\n\t\t\t\t<input\n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tclassName=\"edit\"\n\t\t\t\t\tvalue={newText}\n\t\t\t\t\tonKeyUp={this.handleKeyDown}\n\t\t\t\t\tonChange={this.handleInputChange}\n\t\t\t\t\tref={input => input && input.focus()}\n\t\t\t\t\tonBlur={this.handleOnBlur}\n\t\t\t\t/>\n\t\t\t</li >\n\t\t)\n\t}\n}\n\n","import React from 'react';\nimport Task from './task';\nimport PropTypes from 'prop-types';\nimport './new-task-list.css'\n\nconst NewTaskList = ({ todos, currentStatus, successEdit, onDeleted, toggleStateOfTask, onEdited }) => {\n\tconst el = todos.map((item) => (\n\t\t<Task\n\t\t\tkey={item.id}\n\t\t\t{...item}\n\t\t\tonEdited={() => onEdited(item.id)}\n\t\t\tonDeleted={() => onDeleted(item.id)}\n\t\t\tcurrentStatus={currentStatus}\n\t\t\tsuccessEdit={successEdit}\n\t\t\ttoggleStateOfTask={() => toggleStateOfTask(item.id)} />\n\t))\n\treturn (\n\t\t<ul className='todo-list'>\n\t\t\t{el}\n\t\t</ul>\n\t)\n}\n\nNewTaskList.defaultProps = {\n\ttodos: [],\n\titem: {},\n\tcurrentStatus: 'all',\n\ttoggleStateOfTask: () => { },\n\tsuccessEdit: () => { },\n\tonDeleted: () => { },\n\tonEdited: () => { }\n}\n\nNewTaskList.propTypes = {\n\titem: PropTypes.shape({\n\t\tlabel: PropTypes.string,\n\t\tcompleted: PropTypes.bool,\n\t\tid: PropTypes.number,\n\t\tisEditing: PropTypes.bool,\n\t}),\n\ttodos: PropTypes.arrayOf(PropTypes.object),\n\tcurrentStatus: PropTypes.string,\n\tonDeleted: PropTypes.func,\n\tonEdited: PropTypes.func,\n\ttoggleStateOfTask: PropTypes.func,\n\tsuccessEdit: PropTypes.func\n}\n\nexport default NewTaskList;","import React, { Component } from 'react';\nimport './tasks-filter.css'\nimport PropTypes from 'prop-types'\n\nexport default class TasksFilter extends Component {\n\n\tstatic defaultProps = {\n\t\tcurrentStatus: 'all',\n\t\tdeleteCompleted: () => { },\n\t\thandleToggleFilter: () => { }\n\t}\n\n\tstatic propTypes = {\n\t\tcurrentStatus: PropTypes.string,\n\t\tdeleteCompleted: PropTypes.func,\n\t\thandleToggleFilter: PropTypes.func\n\t}\n\n\trender() {\n\t\tconst { deleteCompleted, currentStatus, handleToggleFilter } = this.props\n\n\t\treturn (\n\t\t\t<ul className=\"filters\">\n\t\t\t\t<li>\n\t\t\t\t\t<button\n\t\t\t\t\t\tname='all'\n\t\t\t\t\t\tclassName={currentStatus === 'all' ? 'selected' : ''}\n\t\t\t\t\t\tonClick={(event) => handleToggleFilter(event.target.name)} >\n\t\t\t\t\t\tAll\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<button\n\t\t\t\t\t\tname='active'\n\t\t\t\t\t\tclassName={currentStatus === 'active' ? 'selected' : ''}\n\t\t\t\t\t\tonClick={(event) => handleToggleFilter(event.target.name)} >\n\t\t\t\t\t\tActive\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<button\n\t\t\t\t\t\tname='completed'\n\t\t\t\t\t\tclassName={currentStatus === 'completed' ? 'selected' : ''}\n\t\t\t\t\t\tonClick={(event) => handleToggleFilter(event.target.name)} >\n\t\t\t\t\t\tCompleted\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={deleteCompleted} >\n\t\t\t\t\t\tClear completed\n\t\t\t\t\t</button>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t)\n\t}\n}\n\n","import React, { Component } from 'react';\nimport TasksFilter from './tasks-filter'\nimport PropTypes from 'prop-types';\nimport './footer.css'\n\nexport default class Footer extends Component {\n\tstatic defaultProps = {\n\t\tcompletedCount: 0,\n\t\tdeleteCompleted: () => { },\n\t\ttodos: [],\n\t\thandleToggleFilter: () => { },\n\t\tcurrentStatus: 'all'\n\t}\n\n\tstatic propTypes = {\n\t\tdeleteCompleted: PropTypes.func,\n\t\ttodos: PropTypes.arrayOf(PropTypes.object),\n\t\thandleToggleFilter: PropTypes.func,\n\t\tcurrentStatus: PropTypes.string\n\t}\n\n\trender() {\n\t\tconst { completedCount, deleteCompleted, todos, handleToggleFilter, currentStatus } = this.props\n\n\t\treturn (\n\t\t\t<footer className='footer'>\n\t\t\t\t<span className=\"todo-count\">{completedCount} items left</span>\n\t\t\t\t<TasksFilter\n\t\t\t\t\t{...todos}\n\t\t\t\t\thandleToggleFilter={handleToggleFilter}\n\t\t\t\t\tcurrentStatus={currentStatus}\n\t\t\t\t\tdeleteCompleted={deleteCompleted}\n\t\t\t\t/>\n\t\t\t</footer>\n\t\t)\n\t}\n}\n\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport NewTaskForm from './components/new-task-form';\nimport NewTaskList from './components/new-task-list';\nimport Footer from './components/footer';\nimport './removeDefaultStyles.css';\n\nexport default class ToDoApp extends Component {\n\n\tstate = {\n\t\ttoDoData: [\n\t\t\tthis.createItem('Completed task'),\n\t\t\tthis.createItem('Editing task'),\n\t\t\tthis.createItem('Active task')\n\t\t],\n\t\tcurrentStatus: 'all'\n\t};\n\n\tcomponentDidUpdate() {\n\t\tlocalStorage.setItem('dataState', JSON.stringify(this.state.toDoData));\n\t\tlocalStorage.setItem('dataStatus', JSON.stringify(this.state.currentStatus));\n\t}\n\n\tcomponentDidMount() {\n\t\tconst dataState = JSON.parse(localStorage.getItem('dataState'))\n\t\tconst dataStatus = JSON.parse(localStorage.getItem('dataStatus'))\n\t\tif (dataState !== null || dataStatus !== null) {\n\t\t\tthis.setState({\n\t\t\t\ttoDoData: dataState,\n\t\t\t\tcurrentStatus: dataStatus\n\t\t\t})\n\t\t}\n\t}\n\n\ttoggleProperty(arr, id, propName) {\n\t\tconst index = arr.findIndex((el) => el.id === id);\n\n\t\tconst oldEl = arr[index];\n\t\tconst newEl = { ...oldEl, [propName]: !oldEl[propName] }\n\n\t\treturn [\n\t\t\t...arr.slice(0, index),\n\t\t\tnewEl,\n\t\t\t...arr.slice(index + 1)\n\t\t]\n\t}\n\n\tcreateItem(label) {\n\t\treturn ({\n\t\t\tlabel: label,\n\t\t\tcompleted: false,\n\t\t\tid: Math.random() * 10000,\n\t\t\tisEditing: false,\n\t\t\tcreated: Date.now()\n\t\t})\n\t}\n\n\tonEdited = (id) => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\treturn { toDoData: this.toggleProperty(toDoData, id, 'isEditing') }\n\t\t})\n\t}\n\n\taddNewItem = (text) => {\n\t\tthis.setState(({ toDoData }) => {\n\n\t\t\tconst newItem = this.createItem(text)\n\t\t\tconst newArr = [...toDoData, newItem]\n\n\t\t\treturn {\n\t\t\t\ttoDoData: newArr\n\t\t\t}\n\n\t\t})\n\n\n\t}\n\n\ttoggleStateOfTask = (id) => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\treturn {\n\t\t\t\ttoDoData: this.toggleProperty(toDoData, id, 'completed')\n\t\t\t};\n\t\t})\n\t}\n\n\tdeleteItem = (id) => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\tconst newArr = toDoData.filter((el) => el.id !== id)\n\n\t\t\treturn {\n\t\t\t\ttoDoData: newArr\n\t\t\t}\n\t\t})\n\t}\n\n\tdeleteCompleted = () => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\tconst newArr = toDoData.filter((el) => el.completed !== true)\n\t\t\tconsole.log(newArr)\n\t\t\treturn {\n\t\t\t\ttoDoData: newArr\n\t\t\t}\n\t\t})\n\n\t}\n\n\thandleToggleFilter = (name) => {\n\t\tthis.setState({\n\t\t\tcurrentStatus: name,\n\t\t})\n\t}\n\n\tsuccessEdit = (text, id) => {\n\t\tthis.setState(({ toDoData }) => {\n\t\t\tconst newState = toDoData.map((el) => {\n\t\t\t\tif (id === el.id) {\n\t\t\t\t\tel.label = text;\n\t\t\t\t\tel.isEditing = el.isEditing === true ? !el.isEditing : el.isEditing\n\t\t\t\t}\n\t\t\t\treturn el;\n\t\t\t})\n\n\t\t\treturn {\n\t\t\t\ttoDoData: newState\n\t\t\t}\n\t\t})\n\t}\n\trender() {\n\t\tconsole.log(this.state)\n\t\tconst { currentStatus, toDoData } = this.state\n\n\t\tconst completedCount = toDoData.filter((el) => el.completed === false).length\n\n\t\treturn (\n\t\t\t<section className='todoapp' >\n\t\t\t\t<header>\n\t\t\t\t\t<h1>todos</h1>\n\t\t\t\t\t<NewTaskForm AddItem={this.addNewItem} />\n\t\t\t\t</header>\n\t\t\t\t<section className='main'>\n\t\t\t\t\t<NewTaskList\n\t\t\t\t\t\ttodos={toDoData}\n\t\t\t\t\t\tcurrentStatus={currentStatus}\n\t\t\t\t\t\tonEdited={this.onEdited}\n\t\t\t\t\t\tonDeleted={this.deleteItem}\n\t\t\t\t\t\ttoggleStateOfTask={this.toggleStateOfTask}\n\t\t\t\t\t\tsuccessEdit={this.successEdit} />\n\t\t\t\t\t<Footer\n\t\t\t\t\t\tcompletedCount={completedCount}\n\t\t\t\t\t\tcurrentStatus={currentStatus}\n\t\t\t\t\t\ttodos={toDoData}\n\t\t\t\t\t\tdeleteCompleted={this.deleteCompleted}\n\t\t\t\t\t\thandleToggleFilter={this.handleToggleFilter}\n\t\t\t\t\t/>\n\t\t\t\t</section>\n\t\t\t</section>\n\t\t);\n\t}\n}\nReactDOM.render(<ToDoApp />, document.getElementById('root'))\n"],"sourceRoot":""}